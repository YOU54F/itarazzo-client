arazzo: 1.0.0
info:
  title: PetStore - Example of Workflows
  version: 4.2.0
  description: >-
    Illustrates workflows whereby a client 
    1)
      a) checks that a pet doe not exists; if exists, delete it first 
      b) add a pet to the pet store
      c) confirm pet exists
    2)
      a) updates the pet from previous step
      b) uploads an image of the pet
      c) reads pets of store by status
sourceDescriptions:
  - name: petStoreApi
    url: https://petstore3.swagger.io/api/v3/openapi.json #v3.0.2
#inside docker with file reference
#    url: /itarazzo/resources/pet-store.openapi.yaml
    type: openapi
workflows:
  - workflowId: delete-pet-and-add-another-pet
    summary: Deletes a pet and adds another pet to the store
    description: >-
      lorem ipsum description of deleting and adding a pet
    inputs:
      $ref: '#/components/inputs/pets'
    steps:
      - stepId: confirm-pet-does-not-exist
        description: Lookup of not existing pet
        operationId: $sourceDescriptions.petStoreApi.getPetById
        parameters:
          - name: petId
            in: path
            value: 4711
        successCriteria:
          - condition: $statusCode == 404
          - condition: $response.body == Pet not found
        onFailure:
          - name: deleteAlreadyExistingPet
            type: goto
            stepId: delete-existing-pet
            criteria:
              - condition: $statusCode == 200
      - stepId: add-another-pet
        description: Adds another pet
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1pet/post'
        parameters:
          - name: accept
            in: header
#            value: "application/xml"
            value: "application/json"
        requestBody:
          contentType: application/json
          payload: |
            {
              "id": null,
              "name": "doggie",
              "category": {
                "id": 1,
                "name": "Dogs"
              },
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available"
            }
          replacements:
            - target: '$.status'
              value: "manipulatedByDev"
            - target: '$.id'
              value: $inputs.petId
        successCriteria:
          - condition: $statusCode == 200
          - condition: $.name == Dogs
            context: $response.body.category
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
#          - condition: /Pet/id = '4711'
#            context: $response.body
#            type: xpath
#            version: xpath-30
#          - condition: /Pet/status = 'manipulatedByDev'
#            context: $response.body
#            type: xpath
#            version: xpath-30
        outputs:
#          addedPetId: $response.body.id #json path
          addedPetId: $response.body#/id #json pointer
#          addedPetId: $response.body.Pet.id #xml
      - stepId: confirm-recently-added-pet-exists
        description: Lookup of added pet
        operationId: $sourceDescriptions.petStoreApi.getPetById
        parameters:
          - name: petId
            in: path
            value: 4711
          - name: accept
            in: header
            value: 'application/json'
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.body != null
          - condition: $.id == 4711
            context: $response.body
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
          - condition: $.status == manipulatedByDev
            context: $response.body
            type: jsonpath
            version: draft-goessner-dispatch-jsonpath-00
        onSuccess:
          - name: endThisWorkflow
            type: end
            criteria:
              - condition: $statusCode == 200
        outputs:
          petName: $response.body.name
      - stepId: delete-existing-pet
        operationId: $sourceDescriptions.petStoreApi.deletePet
        parameters:
          - name: api_key
            in: header
            value: 'demo'
          - name: petId
            in: path
            value: '4711'
        successCriteria:
          - condition: $statusCode == 200
        onSuccess:
          - name: restartExecutionChain
            type: goto
            stepId: confirm-pet-does-not-exist
            criteria:
              - condition: $statusCode == 200
        onFailure:
          - name: retryDeletePet5Times
            type: retry
            retryAfter: 5 # seconds
            retryLimit: 5
            criteria:
              - condition: $statusCode == 400
    outputs:
      addedPetId: $steps.add-another-pet.outputs.addedPetId

  - workflowId: update-pet-with-image-and-find-afterwards
    summary: Updates pet, sets image and finds pets
    description: >-
      lorem ipsum description of updating a pet, setting an image and finds pets by status afterwards
    dependsOn:
      - delete-pet-and-add-another-pet
    inputs:
      $ref: '#/components/inputs/pets'
    steps:
      - stepId: update-pet
        operationId: $sourceDescriptions.petStoreApi.updatePetWithForm
        parameters:
          - name: petId
            in: path
            value: $workflows.delete-pet-and-add-another-pet.outputs.addedPetId
          - name: name
            in: query
            value: hugo
          - name: status
            in: query
            value: bernd
        successCriteria:
          - condition: $statusCode == 200
        outputs:
          updatedPet: $response.body.category
      - stepId: upload-pet-image
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1pet~1{petId}~1uploadImage/post'
        parameters:
          - name: petId
            in: path
            value: $inputs.petId
          - name: additionalMetadata
            in: query
            value: "Some metadata"
        requestBody:
          contentType: application/octet-stream
# inside docker with referenced file
#          payload: /itarazzo/resources/image.png
          payload: src/test/resources/image.png
        successCriteria:
          - condition: $statusCode == 200
        outputs:
          petImage: $response.body.photoUrls
      - stepId: find-pet-by-status
        operationPath: '{$sourceDescriptions.petStoreApi.url}#/paths/~1pet~1findByStatus/get'
        parameters:
          - name: status
            in: query
            value: available
        successCriteria:
          - condition: $statusCode == 200
    outputs:
      updatedPet: $steps.update-pet.outputs.updatedPet
      updatedPetImage: $steps.upload-pet-image.outputs.petImage
components:
  inputs:
    pets:
      type: object
      properties:
        petId:
          type: number
